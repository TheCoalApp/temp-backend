// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "typedSql"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")] // Add the pgvector extension
}

// model User {
//   userId              String       @id @default(uuid())
//   firstName           String
//   lastName            String
//   email               String      @unique
//   password            String
//   createdAt           DateTime    @default(now())
//   updatedAt           DateTime    @updatedAt
//   notes               Note[]
// }

model Note {
  noteid          String     @id @default(uuid())
  // userId              String
  version         Int
  noteTitle       String
  noteDescription String
  syncStatus      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tags            String[]
  // user                User        @relation(fields: [userId], references: [userId])
  embedding       Embedding?
  podcastPath     String?
}

// model User {
//   id        String   @id @default(uuid())
//   username  String   @unique
//   password  String   // Hashed with bcrypt
//   notes     Note[]   // Relation to notes
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Note {
//   id              String   @id @default(uuid())
//   noteTitle       String
//   noteDescription String
//   tag             String?
//   syncStatus      String   @default("pending")
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
//   lockedBy        String?
//   userId          String
//   user            User     @relation(fields: [userId], references: [id])
// }

// model Embedding {
//   embeddingid         String                            @id @default(uuid())
//   noteId              String                            @unique
//   embedding           Unsupported("vector(768)")?
//   createdat           DateTime                          @default(now())
//   note                Note                              @relation(fields: [noteId], references: [id])
// }

model Embedding {
  embeddingid String                      @id @default(uuid())
  noteid      String                      @unique
  embedding   Unsupported("vector(768)")?
  createdat   DateTime                    @default(now())
  note        Note                        @relation(fields: [noteid], references: [noteid])
}

// model Responses {

// }
